CREATE SEQUENCE ZAPOSLENI_SEQ START WITH 1 INCREMENT BY 1;

CREATE TABLE Zaposleni (
  id                 NUMBER PRIMARY KEY,
  mbr                VARCHAR2(13) NOT NULL UNIQUE
                         CONSTRAINT ck_zaposleni_mbr CHECK (REGEXP_LIKE(mbr, '^[0-9]{13}$')),
  prezime            VARCHAR2(50)    NOT NULL,
  ime                VARCHAR2(50)    NOT NULL,
  datum_rodj         DATE            NOT NULL,
  adresa             VARCHAR2(200),
  telefon            VARCHAR2(30),
  datum_zaposlenja   DATE            NOT NULL
);

CREATE TABLE Farmaceut (
  id                                 NUMBER PRIMARY KEY,
  datum_diplomiranja                 DATE            NOT NULL,
  br_licence                         VARCHAR2(50)    NOT NULL,
  datum_poslednje_obnove_licence     DATE            NOT NULL,
  specijalnost                       VARCHAR2(100),
  CONSTRAINT fk_farm_zap FOREIGN KEY (id) REFERENCES Zaposleni(id),
  CONSTRAINT uq_farm_licenca UNIQUE (br_licence)
);

CREATE TABLE Tehnicar (
  id                 NUMBER PRIMARY KEY,
  nivo_obrazovanja   VARCHAR2(10) NOT NULL,
  CONSTRAINT fk_teh_zap FOREIGN KEY (id) REFERENCES Zaposleni(id),
  CONSTRAINT ck_teh_nivo CHECK (nivo_obrazovanja IN ('SREDNJI','VISI'))
);

CREATE TABLE Menadzer (
  id  NUMBER PRIMARY KEY,
  CONSTRAINT fk_mng_zap FOREIGN KEY (id) REFERENCES Zaposleni(id)
);

CREATE TABLE Tehnicar_sertifikacija (
  id_tehnicara   NUMBER       NOT NULL,
  naziv          VARCHAR2(100) NOT NULL,
  datum          DATE          NOT NULL,
  CONSTRAINT pk_teh_cert PRIMARY KEY (id_tehnicara, naziv),
  CONSTRAINT fk_teh_cert FOREIGN KEY (id_tehnicara) REFERENCES Tehnicar(id)
);


CREATE TABLE Prodajna_jedinica (
  id                         NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  naziv                      VARCHAR2(100) NOT NULL,
  ulica                      VARCHAR2(100) NOT NULL,
  broj                       VARCHAR2(10)  NOT NULL,
  postanski_broj             VARCHAR2(10)  NOT NULL,
  mesto                      VARCHAR2(50)  NOT NULL,
  odgovorni_farmaceut_id     NUMBER        NOT NULL,
  CONSTRAINT ck_postanski_broj CHECK (REGEXP_LIKE(postanski_broj, '^\d{5}$')),
  CONSTRAINT fk_pj_farm FOREIGN KEY (odgovorni_farmaceut_id) REFERENCES Farmaceut(id)
);


CREATE TABLE Standardna_apoteka (
  id        NUMBER PRIMARY KEY,
  napomena  VARCHAR2(200),
  CONSTRAINT fk_std_pj FOREIGN KEY (id) REFERENCES Prodajna_jedinica(id)
);

CREATE TABLE Apoteka_sa_lab (
  id        NUMBER PRIMARY KEY,
  napomena  VARCHAR2(200),
  CONSTRAINT fk_lab_pj FOREIGN KEY (id) REFERENCES Prodajna_jedinica(id)
);

CREATE TABLE Specijalizovana_apoteka (
  id        NUMBER PRIMARY KEY,
  specijalnost_tipa VARCHAR2(100),
  napomena  VARCHAR2(200),
  CONSTRAINT fk_spec_pj FOREIGN KEY (id) REFERENCES Prodajna_jedinica(id)
);

CREATE TABLE Radno_vreme (
  prodajna_jedinica_id   NUMBER       NOT NULL,
  dan                    NUMBER(1)    NOT NULL,         -- 1=Pon ... 7=Ned
  vreme_od               TIMESTAMP    NOT NULL,
  vreme_do               TIMESTAMP    NOT NULL,
  CONSTRAINT pk_rv PRIMARY KEY (prodajna_jedinica_id, dan),
  CONSTRAINT fk_rv_pj FOREIGN KEY (prodajna_jedinica_id) REFERENCES Prodajna_jedinica(id),
  CONSTRAINT ck_rv_dan CHECK (dan BETWEEN 1 AND 7)
);

CREATE TABLE Raspored_rada (
  id_zaposlenog         NUMBER       NOT NULL,
  prodajna_jedinica_id  NUMBER       NOT NULL,
  pocetak               TIMESTAMP    NOT NULL,
  kraj                  TIMESTAMP    NOT NULL,
  broj_smene            NUMBER(1),
  CONSTRAINT pk_rr PRIMARY KEY (id_zaposlenog, prodajna_jedinica_id, pocetak),
  CONSTRAINT fk_rr_mbr FOREIGN KEY (id_zaposlenog) REFERENCES Zaposleni(id),
  CONSTRAINT fk_rr_pj FOREIGN KEY (prodajna_jedinica_id) REFERENCES Prodajna_jedinica(id),
  CONSTRAINT ck_rr_interval CHECK (kraj > pocetak),
  CONSTRAINT ck_rr_smena CHECK (broj_smene IS NULL OR broj_smene BETWEEN 1 AND 3)
);

CREATE TABLE Kontrola (
  id_menadzera          NUMBER     NOT NULL,
  datum_kontrole        DATE       NOT NULL,
  prodajna_jedinica_id  NUMBER     NOT NULL,
  CONSTRAINT pk_kontrola PRIMARY KEY (id_menadzera, datum_kontrole),
  CONSTRAINT fk_kon_mng FOREIGN KEY (id_menadzera) REFERENCES Menadzer(id),
  CONSTRAINT fk_kon_pj FOREIGN KEY (prodajna_jedinica_id) REFERENCES Prodajna_jedinica(id)
);

CREATE TABLE Proizvodjac (
  id        NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  naziv     VARCHAR2(150) NOT NULL,
  zemlja    VARCHAR2(100) NOT NULL,
  telefon   VARCHAR2(30),
  email     VARCHAR2(150)
);

CREATE TABLE Proizvodjac_kontakt (
  proizvodjac_id   NUMBER       NOT NULL,
  kontakt          VARCHAR2(150) NOT NULL,
  CONSTRAINT pk_proiz_kontakt PRIMARY KEY (proizvodjac_id, kontakt),
  CONSTRAINT fk_proiz_k FOREIGN KEY (proizvodjac_id) REFERENCES Proizvodjac(id)
);

CREATE TABLE Proizvodjac_sertifikat (
  proizvodjac_id   NUMBER       NOT NULL,
  sertifikat       VARCHAR2(150) NOT NULL,
  CONSTRAINT pk_proiz_sert PRIMARY KEY (proizvodjac_id, sertifikat),
  CONSTRAINT fk_proiz_s FOREIGN KEY (proizvodjac_id) REFERENCES Proizvodjac(id)
);


CREATE TABLE Primarna_grupa (
  id     NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  naziv  VARCHAR2(50) UNIQUE NOT NULL
);

CREATE TABLE Sekundarna_kategorija (
  id     NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  naziv  VARCHAR2(80) UNIQUE NOT NULL
);

CREATE TABLE Lek (
  id                 NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  hemijski_naziv     VARCHAR2(150) NOT NULL,
  komercijalni_naziv VARCHAR2(150) NOT NULL,
  dejstvo            VARCHAR2(4000),
  proizvodjac_id     NUMBER        NOT NULL,
  primarna_grupa_id  NUMBER        NOT NULL,
  CONSTRAINT uq_lek_hemi UNIQUE (hemijski_naziv),
  CONSTRAINT fk_lek_proiz FOREIGN KEY (proizvodjac_id) REFERENCES Proizvodjac(id),
  CONSTRAINT fk_lek_pg FOREIGN KEY (primarna_grupa_id) REFERENCES Primarna_grupa(id)
);

CREATE TABLE Lek_Sekundarna (
  lek_id         NUMBER NOT NULL,
  kategorija_id  NUMBER NOT NULL,
  CONSTRAINT pk_lek_sek PRIMARY KEY (lek_id, kategorija_id),
  CONSTRAINT fk_ls_lek FOREIGN KEY (lek_id) REFERENCES Lek(id),
  CONSTRAINT fk_ls_kat FOREIGN KEY (kategorija_id) REFERENCES Sekundarna_kategorija(id)
);

CREATE TABLE Lek_Nezeljeni_efekat (
  lek_id  NUMBER         NOT NULL,
  opis    VARCHAR2(1000) NOT NULL,
  CONSTRAINT pk_lef PRIMARY KEY (lek_id, opis),
  CONSTRAINT fk_lef_lek FOREIGN KEY (lek_id) REFERENCES Lek(id)
);

CREATE TABLE Lek_Indikacija (
  lek_id  NUMBER         NOT NULL,
  opis    VARCHAR2(1000) NOT NULL,
  CONSTRAINT pk_lind PRIMARY KEY (lek_id, opis),
  CONSTRAINT fk_lind_lek FOREIGN KEY (lek_id) REFERENCES Lek(id)
);

CREATE TABLE Lek_Kontraindikacija (
  lek_id  NUMBER         NOT NULL,
  opis    VARCHAR2(1000) NOT NULL,
  CONSTRAINT pk_lkontr PRIMARY KEY (lek_id, opis),
  CONSTRAINT fk_lkontr_lek FOREIGN KEY (lek_id) REFERENCES Lek(id)
);

CREATE TABLE Oblik (
  id     NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  naziv  VARCHAR2(50) UNIQUE NOT NULL
);

CREATE TABLE Pakovanje (
  id                 NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  lek_id             NUMBER        NOT NULL,
  oblik_id           NUMBER        NOT NULL,
  velicina_pakovanja VARCHAR2(50)  NOT NULL,
  kolicina_aktivne   NUMBER(10,3)  NOT NULL,
  jedinica_mere      VARCHAR2(20)  NOT NULL,
  ambalaza           VARCHAR2(100),
  nacin_cuvanja      VARCHAR2(200),
  preporuceni_rok_dana NUMBER,
  CONSTRAINT fk_pak_lek FOREIGN KEY (lek_id) REFERENCES Lek(id),
  CONSTRAINT fk_pak_oblik FOREIGN KEY (oblik_id) REFERENCES Oblik(id),
  CONSTRAINT uq_pak UNIQUE (lek_id, oblik_id, velicina_pakovanja)
);


CREATE TABLE Distributer (
  id      NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  naziv   VARCHAR2(150) NOT NULL,
  kontakt VARCHAR2(150)
);

CREATE TABLE Isporuka (
  id                     NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  distributer_id         NUMBER      NOT NULL,
  prodajna_jedinica_id   NUMBER      NOT NULL,
  datum                  DATE        NOT NULL,
  magacioner_id          NUMBER,
  CONSTRAINT fk_isp_dist FOREIGN KEY (distributer_id) REFERENCES Distributer(id),
  CONSTRAINT fk_isp_pj FOREIGN KEY (prodajna_jedinica_id) REFERENCES Prodajna_jedinica(id),
  CONSTRAINT fk_isp_mag FOREIGN KEY (magacioner_id) REFERENCES Zaposleni(id)
);

CREATE TABLE Isporuka_stavka (
  isporuka_id   NUMBER NOT NULL,
  pakovanje_id  NUMBER NOT NULL,
  kolicina      NUMBER NOT NULL CHECK (kolicina > 0),
  CONSTRAINT pk_isp_st PRIMARY KEY (isporuka_id, pakovanje_id),
  CONSTRAINT fk_isps_isp FOREIGN KEY (isporuka_id) REFERENCES Isporuka(id),
  CONSTRAINT fk_isps_pak FOREIGN KEY (pakovanje_id) REFERENCES Pakovanje(id)
);

CREATE TABLE Zaliha (
  prodajna_jedinica_id       NUMBER   NOT NULL,
  pakovanje_id               NUMBER   NOT NULL,
  kolicina                   NUMBER   NOT NULL,
  datum_poslednje_isporuke   DATE,
  odgovorni_magacioner_id    NUMBER,
  CONSTRAINT pk_zal PRIMARY KEY (prodajna_jedinica_id, pakovanje_id),
  CONSTRAINT fk_zal_pj FOREIGN KEY (prodajna_jedinica_id) REFERENCES Prodajna_jedinica(id),
  CONSTRAINT fk_zal_pak FOREIGN KEY (pakovanje_id) REFERENCES Pakovanje(id),
  CONSTRAINT fk_zal_mag FOREIGN KEY (odgovorni_magacioner_id) REFERENCES Zaposleni(id)
);

CREATE TABLE Recept (
  serijski_broj              VARCHAR2(50) PRIMARY KEY,
  sifra_lekara               VARCHAR2(50) NOT NULL,
  datum_izd                  DATE         NOT NULL,
  status                     VARCHAR2(10) NOT NULL,
  naziv_ustanove             VARCHAR2(150) NOT NULL,
  realiz_prod_jed_id         NUMBER,
  realizacija_datum          DATE,
  realizovao_farmaceut_id    NUMBER,
  CONSTRAINT ck_rec_status CHECK (status IN ('IZDAT','CEKANJE','ODBIJEN')),
  CONSTRAINT fk_rec_pj FOREIGN KEY (realiz_prod_jed_id) REFERENCES Prodajna_jedinica(id),
  CONSTRAINT fk_rec_far FOREIGN KEY (realizovao_farmaceut_id) REFERENCES Farmaceut(id)
);

CREATE TABLE Recept_stavka (
  recept_ser_broj  VARCHAR2(50) NOT NULL,
  pakovanje_id     NUMBER       NOT NULL,
  kolicina         NUMBER       NOT NULL,
  preporucena_doza VARCHAR2(200),
  CONSTRAINT pk_rec_stav PRIMARY KEY (recept_ser_broj, pakovanje_id),
  CONSTRAINT fk_rs_rec FOREIGN KEY (recept_ser_broj) REFERENCES Recept(serijski_broj),
  CONSTRAINT fk_rs_pak FOREIGN KEY (pakovanje_id) REFERENCES Pakovanje(id)
);


CREATE TABLE Prodaja (
  id                    NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  prodajna_jedinica_id  NUMBER      NOT NULL,
  datum_vreme           TIMESTAMP   NOT NULL,
  blagajnik_id          NUMBER,
  CONSTRAINT fk_pro_pj FOREIGN KEY (prodajna_jedinica_id) REFERENCES Prodajna_jedinica(id),
  CONSTRAINT fk_pro_blag FOREIGN KEY (blagajnik_id) REFERENCES Zaposleni(id)
);

CREATE TABLE Prodaja_stavka (
  prodaja_id            NUMBER      NOT NULL,
  pakovanje_id          NUMBER      NOT NULL,
  kolicina              NUMBER      NOT NULL CHECK (kolicina > 0),
  cena                  NUMBER(12,2),
  recept_serijski_broj  VARCHAR2(50),
  kontrolisana_kol      NUMBER,
  procenat_particip     NUMBER(5,2),
  neophodan_izvestaj    CHAR(1),
  CONSTRAINT pk_pro_st PRIMARY KEY (prodaja_id, pakovanje_id),
  CONSTRAINT fk_ps_pro FOREIGN KEY (prodaja_id) REFERENCES Prodaja(id),
  CONSTRAINT fk_ps_pak FOREIGN KEY (pakovanje_id) REFERENCES Pakovanje(id),
  CONSTRAINT fk_ps_rec FOREIGN KEY (recept_serijski_broj) REFERENCES Recept(serijski_broj),
  CONSTRAINT ck_ps_particip CHECK (procenat_particip IS NULL OR (procenat_particip BETWEEN 0 AND 100)),
  CONSTRAINT ck_ps_izvestaj CHECK (neophodan_izvestaj IS NULL OR neophodan_izvestaj IN ('Y','N'))
);

CREATE TABLE Menadzer_Apoteka (
  id_menadzera         NUMBER NOT NULL,
  prodajna_jedinica_id NUMBER NOT NULL,
  od                   DATE   NOT NULL,
  do                   DATE,
  CONSTRAINT pk_men_ap PRIMARY KEY (id_menadzera, prodajna_jedinica_id, od),
  CONSTRAINT fk_men_ap_m FOREIGN KEY (id_menadzera) REFERENCES Menadzer(id),
  CONSTRAINT fk_men_ap_pj FOREIGN KEY (prodajna_jedinica_id) REFERENCES Prodajna_jedinica(id),
  CONSTRAINT ck_men_ap_od_do CHECK (do IS NULL OR do > od)
);


CREATE INDEX ix_rv_pj ON Radno_vreme (prodajna_jedinica_id);
CREATE INDEX ix_rr_pj ON Raspored_rada (prodajna_jedinica_id);
CREATE INDEX ix_rr_mbr ON Raspored_rada (id_zaposlenog);

CREATE INDEX ix_lek_hemi ON Lek (hemijski_naziv);
CREATE INDEX ix_pak_lek ON Pakovanje (lek_id);
CREATE INDEX ix_pak_oblik ON Pakovanje (oblik_id);

CREATE INDEX ix_zal_pj ON Zaliha (prodajna_jedinica_id);
CREATE INDEX ix_zal_pak ON Zaliha (pakovanje_id);

CREATE INDEX ix_isp_pj ON Isporuka (prodajna_jedinica_id);
CREATE INDEX ix_isps_pak ON Isporuka_stavka (pakovanje_id);

CREATE INDEX ix_rec_status ON Recept (status);
CREATE INDEX ix_rs_pak ON Recept_stavka (pakovanje_id);

CREATE INDEX ix_pro_pj ON Prodaja (prodajna_jedinica_id);
CREATE INDEX ix_ps_pak ON Prodaja_stavka (pakovanje_id);

CREATE OR REPLACE TRIGGER trg_isporuka_stavka_ai
AFTER INSERT ON Isporuka_stavka
FOR EACH ROW
DECLARE
  v_pj   Isporuka.prodajna_jedinica_id%TYPE;
  v_mag  Isporuka.magacioner_mbr%TYPE;
BEGIN
  SELECT prodajna_jedinica_id, magacioner_mbr
    INTO v_pj, v_mag
    FROM Isporuka
   WHERE id = :NEW.isporuka_id;

  MERGE INTO Zaliha z
  USING (SELECT v_pj AS pj, :NEW.pakovanje_id AS pak FROM dual) x
     ON (z.prodajna_jedinica_id = x.pj AND z.pakovanje_id = x.pak)
  WHEN MATCHED THEN
    UPDATE SET z.kolicina = z.kolicina + :NEW.kolicina,
               z.datum_poslednje_isporuke = TRUNC(SYSDATE),
               z.odgovorni_magacioner_mbr = v_mag
  WHEN NOT MATCHED THEN
    INSERT (prodajna_jedinica_id, pakovanje_id, kolicina, datum_poslednje_isporuke, odgovorni_magacioner_mbr)
    VALUES (v_pj, :NEW.pakovanje_id, :NEW.kolicina, TRUNC(SYSDATE), v_mag);
END;

CREATE OR REPLACE TRIGGER trg_isporuka_stavka_ad
AFTER DELETE ON Isporuka_stavka
FOR EACH ROW
DECLARE
  v_pj Zaliha.prodajna_jedinica_id%TYPE;
BEGIN
  SELECT prodajna_jedinica_id
    INTO v_pj
    FROM Isporuka
   WHERE id = :OLD.isporuka_id;

  UPDATE Zaliha
     SET kolicina = kolicina - :OLD.kolicina
   WHERE prodajna_jedinica_id = v_pj
     AND pakovanje_id = :OLD.pakovanje_id;

  --obrisati red ako kolicina padne na 0
  DELETE FROM Zaliha
   WHERE prodajna_jedinica_id = v_pj
     AND pakovanje_id = :OLD.pakovanje_id
     AND kolicina <= 0;
END;

-- Pomoćna funkcija da proveri preklapanje intervala
CREATE OR REPLACE FUNCTION postoji_preklapanje_rr(
  p_id_zaposlenog IN NUMBER,
  p_pj  IN NUMBER,
  p_od  IN TIMESTAMP,
  p_do  IN TIMESTAMP,
  p_od_izuzetak IN TIMESTAMP
) RETURN NUMBER IS
  v_cnt NUMBER;
BEGIN
  SELECT COUNT(*)
    INTO v_cnt
    FROM Raspored_rada rr
   WHERE rr.id_zaposlenog = p_id_zaposlenog
     AND rr.prodajna_jedinica_id = p_pj
     AND NOT (rr.kraj <= p_od OR rr.pocetak >= p_do)
     AND (p_od_izuzetak IS NULL OR rr.pocetak <> p_od_izuzetak);

  RETURN v_cnt;
END;
/

CREATE OR REPLACE TRIGGER trg_rr_biu
BEFORE INSERT OR UPDATE ON Raspored_rada
FOR EACH ROW
DECLARE
  v_cnt NUMBER;
  v_hour NUMBER;
BEGIN
  v_cnt := postoji_preklapanje_rr(:NEW.id_zaposlenog, :NEW.prodajna_jedinica_id, :NEW.pocetak, :NEW.kraj,
                                  CASE WHEN INSERTING THEN NULL ELSE :OLD.pocetak END);
  IF v_cnt > 0 THEN
    RAISE_APPLICATION_ERROR(-20010, 'Postoji preklapanje smene za datog zaposlenog u toj prodajnoj jedinici.');
  END IF;

  IF :NEW.broj_smene IS NULL THEN
    v_hour := TO_NUMBER(TO_CHAR(:NEW.pocetak, 'HH24'));
    IF v_hour BETWEEN 6 AND 13 THEN
      :NEW.broj_smene := 1;
    ELSIF v_hour BETWEEN 14 AND 21 THEN
      :NEW.broj_smene := 2;
    ELSE
      :NEW.broj_smene := 3;
    END IF;
  END IF;
END;
/
